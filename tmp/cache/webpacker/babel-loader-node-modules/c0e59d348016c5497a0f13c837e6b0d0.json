{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nvar buildMap = function buildMap(mapElement) {\n  mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n  return new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v10'\n  });\n};\n\nvar addMarkersToMap = function addMarkersToMap(map, markers) {\n  markers.forEach(function (marker) {\n    var popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n    new mapboxgl.Marker().setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(map);\n  });\n};\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15\n  });\n};\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    var map = buildMap(mapElement);\n    var markers = JSON.parse(mapElement.dataset.markers);\n    addMarkersToMap(map, markers);\n    fitMapToMarkers(map, markers);\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl: mapboxgl\n    }));\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/sven/code/mschma/batch-398-join2kick/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","buildMap","mapElement","accessToken","dataset","mapboxApiKey","Map","container","style","addMarkersToMap","map","markers","forEach","marker","popup","Popup","setHTML","infoWindow","Marker","setLngLat","lng","lat","setPopup","addTo","fitMapToMarkers","bounds","LngLatBounds","extend","fitBounds","padding","maxZoom","initMapbox","document","getElementById","JSON","parse","addControl"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAAgB;AAC/BH,EAAAA,QAAQ,CAACI,WAAT,GAAuBD,UAAU,CAACE,OAAX,CAAmBC,YAA1C;AACA,SAAO,IAAIN,QAAQ,CAACO,GAAb,CAAiB;AACtBC,IAAAA,SAAS,EAAE,KADW;AAEtBC,IAAAA,KAAK,EAAE;AAFe,GAAjB,CAAP;AAID,CAND;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACxCA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1B,QAAMC,KAAK,GAAG,IAAIf,QAAQ,CAACgB,KAAb,GAAqBC,OAArB,CAA6BH,MAAM,CAACI,UAApC,CAAd;AACA,QAAIlB,QAAQ,CAACmB,MAAb,GACGC,SADH,CACa,CAAEN,MAAM,CAACO,GAAT,EAAcP,MAAM,CAACQ,GAArB,CADb,EAEGC,QAFH,CAEYR,KAFZ,EAGGS,KAHH,CAGSb,GAHT;AAID,GAND;AAOD,CARD;;AAUA,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACd,GAAD,EAAMC,OAAN,EAAkB;AACxC,MAAMc,MAAM,GAAG,IAAI1B,QAAQ,CAAC2B,YAAb,EAAf;AACAf,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM;AAAA,WAAIY,MAAM,CAACE,MAAP,CAAc,CAAEd,MAAM,CAACO,GAAT,EAAcP,MAAM,CAACQ,GAArB,CAAd,CAAJ;AAAA,GAAtB;AACAX,EAAAA,GAAG,CAACkB,SAAJ,CAAcH,MAAd,EAAsB;AAAEI,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAtB;AACD,CAJD;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAM7B,UAAU,GAAG8B,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AACA,MAAI/B,UAAJ,EAAgB;AACd,QAAMQ,GAAG,GAAGT,QAAQ,CAACC,UAAD,CAApB;AACA,QAAMS,OAAO,GAAGuB,IAAI,CAACC,KAAL,CAAWjC,UAAU,CAACE,OAAX,CAAmBO,OAA9B,CAAhB;AACAF,IAAAA,eAAe,CAACC,GAAD,EAAMC,OAAN,CAAf;AACAa,IAAAA,eAAe,CAACd,GAAD,EAAMC,OAAN,CAAf;AACAD,IAAAA,GAAG,CAAC0B,UAAJ,CAAe,IAAIpC,cAAJ,CAAmB;AAAEG,MAAAA,WAAW,EAAEJ,QAAQ,CAACI,WAAxB;AAClCJ,MAAAA,QAAQ,EAAEA;AADwB,KAAnB,CAAf;AAED;AACF,CAVD;;AAYA,SAASgC,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nconst buildMap = (mapElement) => {\n  mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n  return new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v10'\n  });\n};\n\nconst addMarkersToMap = (map, markers) => {\n  markers.forEach((marker) => {\n    const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n    new mapboxgl.Marker()\n      .setLngLat([ marker.lng, marker.lat ])\n      .setPopup(popup)\n      .addTo(map);\n  });\n};\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15 });\n};\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n  if (mapElement) {\n    const map = buildMap(mapElement);\n    const markers = JSON.parse(mapElement.dataset.markers);\n    addMarkersToMap(map, markers);\n    fitMapToMarkers(map, markers);\n    map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken,\n    mapboxgl: mapboxgl }));\n  }\n};\n\nexport { initMapbox };\n"]},"metadata":{},"sourceType":"module"}